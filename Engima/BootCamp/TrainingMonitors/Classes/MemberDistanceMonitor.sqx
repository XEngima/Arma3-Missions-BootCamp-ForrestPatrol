/*
 * Name:	MemberDistanceMonitor
 * Date:	2017-10-03
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A training monitor that monitors and calculates a score for a group's combat behavior.
 */
 
call compile preprocessFileLineNumbers "Engima\BootCamp\TrainingMonitors\Classes\MonitorUnit.sqx";

using Sqx.Collections;
 
namespace Engima.BootCamp.TrainingMonitors
{
	public class MemberDistanceMonitor : ITrainingMonitor
	{
		private fields ["_mGroup" as Group, "_mMinDistance" as Scalar, "_mMaxDistance" as Scalar, "_mMonitorUnits" as Array, "_mRunning" as Boolean];
	
		// Creates a MemberDistanceMonitor object.
		public constructor {
			params ["_group" as Group, "_minDistance" as Scalar, "_maxDistance" as Scalar];
			
			_mGroup = _group;
			_mMinDistance = _minDistance;
			_mMaxDistance = _maxDistance;
			_mMonitorUnits = [];
			_mRunning = false;
		};
		
		private method Run {
			while { _mRunning } do {
				{
					private _unit = _x;
					private _closestMemberDistance = 1000000;
					
					{
						private _otherUnit = _x;
						
						if (_unit != _otherUnit) then {
							if (_unit distance _otherUnit < _mMinDistance) then {
								[_mMonitorUnits, _unit, "Too close to team member", -5 + floor (_unit distance _otherUnit)] call MonitorUnit.AddUnitScore;
							};
							
							if (_unit distance _otherUnit < _closestMemberDistance) then {
								_closestMemberDistance = _unit distance _otherUnit;
							};
						};
					} foreach units _mGroup as Object;
					
					if (_closestMemberDistance > _mMaxDistance) then {
						[_mMonitorUnits, _unit, "Too far from team members", -ceil((_closestMemberDistance - _mMaxDistance) / 5)] call MonitorUnit.AddUnitScore;
					};
					
				} foreach units _mGroup as Object;
				
				sleep 1;
			};
		};
		
		public method Start {
			if (count units _mGroup > 1) then {
				_mRunning = true;
				[] spawn _self.Run;	
			};
		};
		
		public method Stop {
			_mRunning = false;
		};
		
		public method String GetReport {
			private _report = "";
			private _newLine = "";
			
			{
				_report = _report + _newLine + (call _x.ToString);
				_newLine = "\n";
			} foreach ([_mMonitorUnits, false] call Sorter.QSort) as MonitorUnit;
			
			_report = _report + _newLine + "Total: " + str (call _self.GetScore) + "/1000";
			
			_report
		};
		
		public method Scalar GetScore {
			private _score = 1000;
		
			{
				_score = _score + _x.Score;
			} foreach _mMonitorUnits as MonitorUnit;
			
			if (_score < 0) then {
				_score = 0;
			};
			
			_score
		};
		
		public static method String GetBriefingText {
			"Member distance monitoring. Keep a good distance between you and the other team members. Not too close to a team member, and not too far from the closest team member."
		};
	};
};
